/*
 * SuperviseThreads.c
 *
 *  Created on: Oct 24, 2016
 *      Author: Kevin
 */

#include "usefulVariables.h"

int SuperviseThreads(int numObs, int numRegions, boolean chatty1){
	int i, k;
	int threadcount = 0;
	int maxThreads = numRegions + 2;
	int totalSize = numObs + numRegions;

	sourceData revenue;
	sourceData expenses;
	currVar corporate;
	currVar region[numRegions];
	pthread_t tid[maxThreads];
	pthread_attr_t attr[maxThreads];

	for(i = 0; i<maxThreads; i++){
		pthread_attr_init(&attr[i]);
		threadcount++;
	}

	corporate.start_region = 0;
	corporate.numshops = totalSize;
	corporate.Revenue = (double *) malloc(sizeof(double)*totalSize);
	corporate.Expenses = (double *) malloc(sizeof(double)*totalSize);
	corporate.Overhead = (double *) malloc(sizeof(double)*totalSize);
	corporate.Profit = (double *) malloc(sizeof(double)*totalSize);

	revenue.values = corporate.Revenue;
	revenue.numObs = totalSize;
	revenue.sourceFileName = "Revenue.txt";

	expenses.values = corporate.Expenses;
	expenses.numObs = totalSize;
	expenses.sourceFileName = "Expenses.txt";

	pthread_create(&tid[0], &attr[0], dataFiller, (void *) &revenue);
	pthread_create(&tid[1], &attr[1], dataFiller, (void *) &expenses);

	for (k=0; k<2; k++){
		pthread_join(tid[k], NULL);
	}

	double TotalRevenue = 0;
	for (i=0; i<totalSize; i++){
		TotalRevenue += corporate.Revenue[i];
	}

	double Overhead = 1234567;
	double magicFraction = 100 + Overhead/TotalRevenue;

	double amountCents, partial Cents, amount Dollars;
	long wholeCents;

	for (i=0; i< totalSize;i++){
		amountCents = corporate.Revenue
	}
}
